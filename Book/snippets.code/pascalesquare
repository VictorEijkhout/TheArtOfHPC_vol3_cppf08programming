// /pascal1.cpp
class pascal {
private:
  int size,number_length;
  vector<int> array;
public:
  pascal(int n) {
    array = vector<int>(n*n);
    size = n;
    fill();
  };
  void fill() {
    set(1,1,1);
    for (int row=2; row<=size; ++row)
      fillrow(row);
    int imax = get(size,(size+1)/2);
    number_length = imax > 0 ? (int) log10 ((double) imax) + 1 : 1;
  };
  void fillrow(int row) {
    for (int col=1; col<=row; ++col) {
      int value;
      if (col==1 || col==row)
	value = 1;
      else
	value = get(row-1,col-1)+get(row-1,col);
      set(row,col,value);
    }
  }
  int get(int row,int col) {
    return array.at( (row-1)*size + (col-1) );
  };
  void set(int row,int col,int value) {
    array.at( (row-1)*size + (col-1) ) = value;
  };
  void print() {
    for (int row=1; row<=size; ++row) {
      cout << "Row " << setw(number_length+1) << row << ":";
      cout << std::string((number_length-1)*(size-row),' ');
      for (int col=1; col<=row; ++col)
	cout << setw(number_length+1) << get(row,col);
      cout << '\n';
    }
  };
  void print(int m) {
    for (int row=1; row<=size; ++row) {
      cout << std::string(size-row,' ');
      for (int col=1; col<=row; ++col) {
	int v = get(row,col);
	char c = v%m ? '*' : ' ';
	cout << ' ' << c;
      }
      cout << '\n';
    }
  };
};
